{"version":3,"sources":["components/Title.js","api/index.js","components/Search.js","components/Preview.js","components/Loading.js","components/Feature.js","index.js"],"names":["Title","id","BASE_URL","KEY","fetchQueryResultsFromTermAndValue","term","value","a","fetch","encodeURI","split","join","response","json","data","fetchQueryResultsFromURL","url","fetchQueryResults","century","classification","queryString","localStorage","getItem","JSON","parse","records","setItem","stringify","Search","setIsLoading","setSearchResults","useState","centuryList","setCenturyList","classificationList","setClassificationList","setQueryString","setCentury","setClassification","useEffect","centuriesPromise","fetchAllCenturies","classificationsPromise","fetchAllClassifications","Promise","all","then","centuries","classifications","console","log","map","name","classif","catch","error","onSubmit","event","preventDefault","results","htmlFor","type","placeholder","onChange","target","className","length","cl","index","key","Preview","searchResults","setFeaturedResult","info","fetchPage","pageUrl","disabled","prev","onClick","next","result","primaryimageurl","src","alt","description","title","Loading","Searchable","contentTitle","searchTerm","searchValue","href","Feature","featuredResult","dated","culture","medium","toLowerCase","technique","people","forEach","person","displayname","images","image","baseimageurl","App","isLoading","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a48d7976.chunk.js","sourcesContent":["import React from 'react';\n\n const Title = () =>{\n     return (\n         <div id=\"title\">\n             <h1>\n                 The Art Collector\n             </h1>\n             <h5>\n                 Search the Harvard Art Museums' Private Collections\n             </h5>\n         </div>\n     )\n }\n\n export default Title;","\nexport const BASE_URL = 'https://api.harvardartmuseums.org';\nexport const KEY = 'apikey=63a5a02b-667e-4b25-85e7-2e79906e6504';\n\n/**\n * This will make a call to the API for a single term and value (e.g. \"person\", and \"unknown\"), and return the result\n */\nexport async function fetchQueryResultsFromTermAndValue(term, value) {\n  try {\n    const response = await fetch(`${ BASE_URL }/object?${ KEY }&${ term }=${ encodeURI(value.split('-').join('|')) }`);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This will make a call to the API for a preformed url (useful for previous and next buttons), and return the result\n */\nexport async function fetchQueryResultsFromURL(url) {\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * Requires an object { century: '', classification: '', queryString: '' } to be passed in as an argument\n * \n * Then makes a call to the API, and returns the first page of results\n */\nexport async function fetchQueryResults({\n  century,\n  classification,\n  queryString,\n}) {\n  const url = `${ BASE_URL }/object?${ KEY }&classification=${ classification }&century=${ \n    century }&keyword=${ queryString }`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are centuries stored in localStorage, or fetches them from the API and stores them in localStorage if not\n */\nexport async function fetchAllCenturies() {\n  if (localStorage.getItem('centuries')) {\n    return JSON.parse(localStorage.getItem('centuries'));\n  }\n\n  const url = `${ BASE_URL }/century?${ KEY }&size=100&sort=temporalorder`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('centuries', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are classifications stored in localStorage, or fetches them from the API and stores them in localStorage if not \n */\nexport async function fetchAllClassifications() {\n  if (localStorage.getItem('classifications')) {\n    return JSON.parse(localStorage.getItem('classifications'));\n  }\n\n  const url = `${ BASE_URL }/classification?${ KEY }&size=100&sort=name`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('classifications', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}","import React, { useEffect, useState } from 'react';\n\nimport { \n  fetchAllCenturies,\n  fetchAllClassifications,\n  fetchQueryResults\n} from '../api';\n\nconst Search = ({setIsLoading, setSearchResults}) => {\n\n   const [centuryList, setCenturyList] = useState([]);\n   const [classificationList, setClassificationList] = useState([]);\n   const [queryString, setQueryString] = useState('');\n   const [century, setCentury] = useState('any');\n   const [classification, setClassification] = useState('any');\n\n  useEffect( () => {\n    const centuriesPromise = fetchAllCenturies()\n    const classificationsPromise = fetchAllClassifications()\n\n    Promise.all([centuriesPromise, classificationsPromise])\n                .then(([centuries, classifications])=>{\n                  console.log(\"response\", centuries, classifications);\n                  setCenturyList(centuries.map(century =>{\n                    return century.name;\n                  }))\n                  setClassificationList(classifications.map(classif =>{\n                    return classif.name;\n                  }));\n                })\n                .catch(console.error)\n\n                console.log(\"centuries\", centuryList);\n                console.log(\"classifications\", classificationList);\n  }, []);\n\n  function onTextChange(event){\n    setQueryString(event.target.value);\n  }\n  function onClassifChange(event){\n    setClassification(event.target.value);\n  }\n  function onCenturyChange(event){\n    setCentury(event.target.value);\n  }\n\n  return ( <form id=\"search\" onSubmit={async (event) => {\n    event.preventDefault();\n    setIsLoading(true);\n    try {\n      const results = await fetchQueryResults({century, classification, queryString});\n      setSearchResults(results);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  }}>\n    <fieldset>\n      <label htmlFor=\"keywords\">Query</label>\n      <input \n        id=\"keywords\" \n        type=\"text\" \n        placeholder=\"enter keywords...\" \n        value={queryString} \n        onChange={onTextChange}/>\n    </fieldset>\n    <fieldset>\n      <label htmlFor=\"select-classification\">Classification <span className=\"classification-count\">({ classificationList.length })</span></label>\n      <select \n        name=\"classification\"\n        id=\"select-classification\"\n        value={classification} \n        onChange={onClassifChange}>\n        <option value=\"any\">Any</option>\n        {classificationList.map((cl, index )=>{\n          return <option key={index}>{cl}</option>\n        })}\n      </select>\n    </fieldset>\n    <fieldset>\n      <label htmlFor=\"select-century\">Century <span className=\"century-count\">({ centuryList.length })</span></label>\n      <select \n        name=\"century\" \n        id=\"select-century\"\n        value={century} \n        onChange={onCenturyChange}>\n        <option value=\"any\">Any</option>\n        {centuryList.map((century, index)=>{\n          return <option value={index}>{century}</option>\n        })}\n      </select>\n     </fieldset>\n    <button>SEARCH</button>\n  </form>\n  )}\n\nexport default Search;","import React, {useState} from 'react';\n\n/**\n * We need to import fetchQueryResultsFromURL since we will sometimes have urls in info.prev and info.next\n * which are query urls.\n */\nimport { fetchQueryResultsFromURL } from '../api';\n\nconst Preview = ({ searchResults , setIsLoading, setSearchResults, setFeaturedResult}) => {\n  /**\n   * Destructure setSearchResults, setFeaturedResult, and setIsLoading from props\n   * and also destructure info and records from props.searchResults\n   * \n   * You need info, records, setSearchResults, setFeaturedResult, and setIsLoading as available constants\n   */\n  const { info, records } = searchResults;\n\n  \n  async function fetchPage(pageUrl) {\n    setIsLoading(true);\n\n    try {\n      const results = await fetchQueryResultsFromURL(pageUrl);\n      setSearchResults(results);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return <aside id=\"preview\">\n    <header className=\"pagination\">\n      <button \n        disabled={!info.prev} \n        className=\"previous\"\n        onClick={()=>{\n          fetchPage(info.prev)\n          }}>Previous</button>\n      <button\n        disabled={!info.next}\n        className=\"next\"\n        onClick={()=>{\n          fetchPage(info.next)\n          }}>Next</button>\n    </header>\n    <section className=\"results\">\n      {\n        records.map((result, index) =>{\n          return <div  \n            key={ index }\n            className=\"object-preview\"\n            onClick={() => {\n              setFeaturedResult(result)\n            }}>\n            { \n              result.primaryimageurl? <img src={ result.primaryimageurl } alt={ result.description } /> : null\n            }\n            {\n              result.title? <h3>{ result.title }</h3> : <h3>MISSING INFO</h3>\n            }\n          </div>\n        })\n      }\n    </section>\n  </aside>\n}\n\nexport default Preview;","import React from 'react';\n\n const Loading = () =>{\n     return (\n         <div id=\"loading\">\n             <h2 className=\"message\">Searching...</h2>\n         </div>\n     )\n }\n\nexport default Loading;","import React, { Fragment } from 'react';\n\nimport { fetchQueryResultsFromTermAndValue } from '../api';\n\nconst Searchable = ({contentTitle, searchTerm, searchValue, setIsLoading, setSearchResults}) => {\n  \n    return (\n        <div className=\"content\">\n            <p className=\"contentTitle\">{contentTitle}:</p>\n            <a href=\"#\" onClick={async (event) => {\n                setIsLoading(true);\n                try {\n                    const results = await fetchQueryResultsFromTermAndValue(searchTerm, searchValue);\n                    setSearchResults(results);\n                } catch (error) {\n                    console.error(error);\n                }finally {\n                    setIsLoading(false);\n                }\n            }}>{searchTerm}</a>\n        </div>\n    )\n}\n\nconst Feature = ({featuredResult, setIsLoading, setSearchResults}) => {\n    return (\n        <main id='feature'>\n            { \n                featuredResult?  <div className=\"object-feature\">\n                      <header>\n                        <h3>({featuredResult.title})</h3>\n                        <h4>({featuredResult.dated})</h4>\n                      </header>\n                      <section className=\"facts\">\n                       <Searchable contentTitle={\"Culture\"} searchTerm={featuredResult.culture} searchValue={featuredResult.culture} setIsLoading={setIsLoading} setSearchResults={setSearchResults}/>\n                       <Searchable contentTitle={\"Medium(s)\"} searchTerm={featuredResult.medium} searchValue={featuredResult.medium.toLowerCase()} setIsLoading={setIsLoading} setSearchResults={setSearchResults}/>\n                       <Searchable contentTitle={\"Technique(s)\"} searchTerm={featuredResult.technique} searchValue={featuredResult.technique} setIsLoading={setIsLoading} setSearchResults={setSearchResults}/>\n            {\n                           featuredResult.people? featuredResult.people.forEach(person=>{\n                           return <Searchable contentTitle={\"People\"} searchTerm={\"people\"} searchValue={person.displayname} setIsLoading={setIsLoading} setSearchResults={setSearchResults}/>\n                           })\n                           : null\n            }\n                           </section>\n                     <section className=\"photos\">\n            {\n                    featuredResult.images? featuredResult.images.map(image=>{\n                        return <img src={image.baseimageurl} />\n                    })\n                    : null\n            }       \n                     </section>\n                   </div>\n                : null \n            }\n        </main>\n    )\n}\n\nexport default Feature;","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {\n  Feature,\n  Loading,\n  Preview,\n  Search,\n  Title\n} from './components';\n\nconst App = () => {\n  const [searchResults, setSearchResults] = useState({info: {}, records: []});\n  const [featuredResult, setFeaturedResult] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  return ( <div className=\"app\">\n    <Title />\n    <Search setIsLoading={setIsLoading} setSearchResults={setSearchResults}/>\n    <Preview searchResults={searchResults} setIsLoading={setIsLoading} setSearchResults={setSearchResults} setFeaturedResult={setFeaturedResult}/>\n    <Feature featuredResult={featuredResult} setIsLoading={setIsLoading} setSearchResults={setSearchResults}/>\n    {isLoading ? <Loading /> : null}\n  </div> ) \n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('app')\n)\n"],"sourceRoot":""}